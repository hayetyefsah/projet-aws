Resources:
  ARCHVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      Tags:
        - Key: name
          Value: ARCH-VPC

  publicsubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2a
      VpcId: !Ref ARCHVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: ARCH-subnetpublic1

  publicsubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2b
      VpcId: !Ref ARCHVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: ARCH-subnetpublic2

  routeTableNamepublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ARCHVPC
      Tags:
        - Key: Name
          Value: ARCH-table_routage_public
  igwName:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ARCH-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ARCHVPC
      InternetGatewayId: !Ref igwName

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref routeTableNamepublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igwName

  routeTableAssocName:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicsubnet1
      RouteTableId: !Ref routeTableNamepublic

  routeTableAssocName2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicsubnet2
      RouteTableId: !Ref routeTableNamepublic


  webSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: gs-ARCH
      GroupDescription: groupe de securite web
      VpcId: !Ref ARCHVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0 
  
  webSecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: gs-ARCH2
      GroupDescription: groupe de securite EKS cluster
      VpcId: !Ref ARCHVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '10250'
          ToPort: '10250'
          CidrIp: 0.0.0.0/0 

        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0

        - IpProtocol: UDP
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0

  AmazonEKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        #- arn:aws:iam::aws:policy/AmazonEKS_CNI_IPv6_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds

      RoleName: ARCH-cdp-liftie-instance-profile2


  AWSServiceRoleForAmazonEKS:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
        - arn:aws:iam::639962416620:policy/eks-codebuild-sts-assume-role
      RoleName: ARCH-cdp-eks-master-role2



  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: ARCH-cluster
      #Version: "1.20"
      RoleArn: !GetAtt AWSServiceRoleForAmazonEKS.Arn 
      ResourcesVpcConfig:
        # SecurityGroupIds:
        #   - !Ref webSecurityGroup2
        SubnetIds:
          - !Ref publicsubnet2
          - !Ref publicsubnet1
        # EndpointPublicAccess: false
        # EndpointPrivateAccess: true
        #PublicAccessCidrs: [ "1.1.1.2/32" ]
      # Logging:
      #   ClusterLogging:
      #     EnabledTypes:
      #       - Type: api
      #       - Type: audit
      Tags:
        - Key: "Name"
          Value: "ARCH-cluster"
  
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      #AmiType: 'ami-086b3de06dafe36c5'
      ClusterName: !Ref EKSCluster
      InstanceTypes: 
        - t2.medium
      #LaunchTemplate:
         #LaunchTemplateId: !Ref ARCHlaunchTemplate
         #Version: !GetAtt ARCHlaunchTemplate.LatestVersionNumber
      NodeRole: !GetAtt AmazonEKSNodeRole.Arn
      ScalingConfig:
        MinSize: 1
        DesiredSize: 2
        MaxSize: 3
      Subnets:
        - !Ref publicsubnet1
        - !Ref publicsubnet2

  # asg:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Properties:
  #     LaunchTemplate:
  #       LaunchTemplateId: !Ref HayetlaunchTemplate
  #       Version: !GetAtt HayetlaunchTemplate.LatestVersionNumber
  #     MaxSize: '3'
  #     MinSize: '1'
  #     VPCZoneIdentifier:
  #       - !Ref publicsubnet1
  #       - !Ref publicsubnet2

  # ARCHlaunchTemplate:
  #   Type: AWS::EC2::LaunchTemplate
  #   Properties:
  #     LaunchTemplateName: launch-template
  #     LaunchTemplateData: 
  #       ImageId: ami-09ee0944866c73f62
  #       InstanceType: t2.micro
  #       SecurityGroupIds: 
  #         - !Ref webSecurityGroup

# LoadBalancer

# SNS







    

    
  